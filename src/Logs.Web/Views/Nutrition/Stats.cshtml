@model Logs.Web.Models.Nutrition.NutritionStatsViewModel

@{
    ViewBag.Title = "Stats";
}
<div class="row">
    <table>
        <tr>
            <th class="btn btn-default" id="Calories">
                @Html.DisplayNameFor(model => model.Calories)
            </th>
            <th class="btn btn-default" id="Protein">
                @Html.DisplayNameFor(model => model.Protein)
            </th>
            <th class="btn btn-default" id="Carbs">
                @Html.DisplayNameFor(model => model.Carbs)
            </th>
            <th class="btn btn-default" id="Fats">
                @Html.DisplayNameFor(model => model.Fats)
            </th>
            <th class="btn btn-default" id="Fiber">
                @Html.DisplayNameFor(model => model.Fiber)
            </th>
            <th class="btn btn-default" id="Sugar">
                @Html.DisplayNameFor(model => model.Sugar)
            </th>
            <th class="btn btn-default" id="WaterInLitres">
                @Html.DisplayNameFor(model => model.WaterInLitres)
            </th>
        </tr>
    </table>
</div>
<hr />
<div class="row">
    <div class="col-md-12">
        <div id="chart">
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-4">
        @foreach (var item in Model.ListModel)
        {

            <div id="nutrition-@item.Id">
                @using (Ajax.BeginForm("DeleteNutrition", new { controller = "Nutrition", id = item.Id },
                new AjaxOptions
                {
                    UpdateTargetId = string.Format("nutrition-{0}", item.Id),
                    InsertionMode = InsertionMode.Replace,
                    HttpMethod = "POST"
                }, null))
                {

                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">
                        <hr />
                        @Html.HiddenFor(model => item.Id)
                        
                        <button type="submit" class="pull-right">
                            <i class="pull-right glyphicon glyphicon-remove btn-lg"></i>
                        </button>
                    </div>
                }

                @using (Ajax.BeginForm("GetNutrition", new { controller = "Nutrition", id = item.Id },
                new AjaxOptions
                {
                    UpdateTargetId = "nutrition-details",
                    InsertionMode = InsertionMode.Replace,
                    HttpMethod = "GET"
                }, null))
                {

                    <div class="form-horizontal">
                        <hr />
                        @Html.HiddenFor(model => item.Id)

                        <div class="form-group">
                            <div class="col-md-10">
                                @Html.DisplayFor(model => item.FormattedDate, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>
                        <input type="submit" value="details" />
                    </div>
                }
            </div>
        }
    </div>

    <div id="nutrition-details" class="col-md-8"></div>
</div>

<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<script>
    var dates= @Html.Raw(Json.Encode(Model.Dates));

    $('#Calories').click(()=>{
        var data = [
        {
            x:dates,
            y: @Html.Raw(Json.Encode(Model.Calories)),
            type: 'scatter',
            name: 'lalala'
        }
        ];

        plot(data,"Calories");
    });

    $('#Protein').click(()=>{
        var data = [
        {
            x:dates,
            y: @Html.Raw(Json.Encode(Model.Protein)),
            type: 'scatter',
            name: 'lalala'
        }
        ];

        plot(data,"Protein");
    });

    $('#Carbs').click(()=>{
        var data = [
        {
            x:dates,
            y: @Html.Raw(Json.Encode(Model.Carbs)),
            type: 'scatter',
            name: 'lalala'
        }
        ];

        plot(data,"Carbs");
    });

    $('#Fats').click(()=>{
        var data = [
        {
            x:dates,
            y: @Html.Raw(Json.Encode(Model.Fats)),
            type: 'scatter',
            name: 'lalala'
        }
        ];

        plot(data,"Fats");
    });

    $('#Fiber').click(()=>{
        var data = [
        {
            x:dates,
            y: @Html.Raw(Json.Encode(Model.Fiber)),
            type: 'scatter',
            name: 'lalala'
        }
        ];

        plot(data,"Fiber");
    });

    $('#Sugar').click(()=>{
        var data = [
        {
            x:dates,
            y: @Html.Raw(Json.Encode(Model.Sugar)),
            type: 'scatter',
            name: 'lalala'
        }
        ];

        plot(data,"Sugar");
    });

    $('#WaterInLitres').click(()=>{
        var data = [
        {
            x:dates,
            y: @Html.Raw(Json.Encode(Model.WaterInLitres)),
            type: 'scatter',
            name: 'lalala'
        }
        ];

        plot(data,"Water");
    });

    function plot(datas, title){
        var layout = {
            autosize: true,
            title: title,
        };

        $('#chart').val("");
        Plotly.newPlot('chart', datas, layout);
    }

    var data = [
        {
            x:dates,
            y: @Html.Raw(Json.Encode(Model.Calories)),
            type: 'scatter',
            name: 'lalala'
        }
    ];

    plot(data, "Calories");
</script>


